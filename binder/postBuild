#!/usr/bin/env bash
set -euo pipefail

echo "[postBuild] Detecting conda/jupyter prefix"
# Robustly determine the prefix repo2docker is using
CONDA_PREFIX_PATH="${CONDA_PREFIX:-$(python - <<'PY'
import os, sys
print(os.environ.get("CONDA_PREFIX", sys.prefix))
PY
)}"
echo "[postBuild] CONDA_PREFIX=$CONDA_PREFIX_PATH"

# Ensure nbclassic + configurator are present (install these via environment.yml ideally)
python -m pip install --no-cache-dir nbclassic jupyter_nbextensions_configurator

# Create config dirs for BOTH ServerApp (new) and NotebookApp (classic)
NB_D="$CONDA_PREFIX_PATH/etc/jupyter/nbconfig/notebook.d"
JUP_NB_D="$CONDA_PREFIX_PATH/etc/jupyter/jupyter_notebook_config.d"
JUP_SRV_D="$CONDA_PREFIX_PATH/etc/jupyter/jupyter_server_config.d"
mkdir -p "$NB_D" "$JUP_NB_D" "$JUP_SRV_D"

echo "[postBuild] Force classic as the default landing page"
# Jupyter Server (Lab 4/Notebook 7 path)
cat > "$JUP_SRV_D/default_url.json" <<'JSON'
{
  "ServerApp": {
    "default_url": "/tree",
    "jpserver_extensions": {
      "nbclassic": true
    }
  }
}
JSON

# Legacy NotebookApp fallback (harmless if ignored)
cat > "$JUP_NB_D/default_url.json" <<'JSON'
{
  "NotebookApp": {
    "default_url": "/tree"
  }
}
JSON

echo "[postBuild] Enable nbextensions configurator (classic)"
cat > "$JUP_NB_D/jupyter_nbextensions_configurator.json" <<'JSON'
{
  "NotebookApp": {
    "nbserver_extensions": {
      "jupyter_nbextensions_configurator": true
    }
  }
}
JSON

echo "[postBuild] Enable your classic nbextensions"
cat > "$NB_D/enable_extensions.json" <<'JSON'
{
  "load_extensions": {
    "toc2/main": true,
    "collapsible_headings/main": true,
    "execute_time/ExecuteTime": true,
    "hinterland/hinterland": true,
    "codefolding/main": true,
    "varInspector/main": true,
    "exercise2/main": true,
    "ruler/main": true,
    "scroll_down/main": true,
    "splitcell/main": true,
    "freeze/main": true
  }
}
JSON

echo "[postBuild] Verifying files:"
ls -R "$CONDA_PREFIX_PATH/etc/jupyter" || true
echo "[postBuild] Done."
